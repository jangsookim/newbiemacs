:PROPERTIES:
:ID:       1EE4CEEE-972E-42FE-9851-EB3A970D1136
:END:
#+title: nbm-config

* Packages
** Core Packages
#+begin_src emacs-lisp :tangle yes
  (unless (package-installed-p 'evil) (package-install 'evil))
  (use-package evil :config (evil-mode))

  (use-package tex :ensure auctex)
  (use-package auctex-latexmk)

  (use-package helm
    :init
    (global-set-key (kbd "M-x") 'helm-M-x)
    (setq helm-move-to-line-cycle-in-source nil)
    (setq helm-autoresize-mode t)
    (setq helm-display-header-line nil)
    (setq helm-buffer-max-length 30)
    (helm-mode 1)
    (add-hook 'helm-minibuffer-set-up-hook 'helm-exchange-minibuffer-and-header-line))

  (use-package helm-bibtex
    :init
    (with-eval-after-load 'helm-bibtex
      (require 'bibtex-completion)
      ;; changing the default action of helm-bibtex
      (helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-citation helm-source-bibtex 0)
      (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
      (setq bibtex-completion-display-formats (quote ((t . "${year:4} ${author:26} ${title:**} "))))))

  (use-package org-ref)
  (use-package org-roam)
  (use-package org-roam-ui)

  (use-package openwith :init (openwith-mode t)
    (cond ((equal system-type 'gnu/linux)
           (setq process-connection-type nil)
           (setq openwith-associations '(("\\.pdf\\'" "xdg-open" (file)))))
          ((equal system-type 'darwin)
           (setq openwith-associations '(("\\.pdf\\'" "open -a Skim.app" (file))
                                    ("\\.zip\\'" "open" (file))
                                    ("\\.hwp\\'" "open" (file))
                                    ("\\.hwpx\\'" "open" (file))
                                    ("\\.pptx\\'" "open" (file))
                                    ("\\.xlsx\\'" "open" (file))
                                    ("\\.docx\\'" "open" (file))
                                    ("\\.djvu\\'" "open" (file)))))
          (t
           (setq openwith-associations '(("\\.pdf\\'" "open" (file))
                                    ("\\.hwp\\'" "open" (file))
                                    ("\\.hwpx\\'" "open" (file))
                                    ("\\.pptx\\'" "open" (file))
                                    ("\\.xlsx\\'" "open" (file))
                                    ("\\.docx\\'" "open" (file))
                                    ("\\.djvu\\'" "open" (file)))))))

  (use-package yasnippet
    :init
    (setq yas-snippet-dirs (list (concat *nbm-home* "nbm-user-settings/snippets/")
                                 (concat "~/nbm-root/newbiemacs/nbm-user-settings/snippets")))
    (setq yas-triggers-in-field t); Enable nested triggering of snippets
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
    (yas-global-mode 1) (yas-reload-all))

  (use-package which-key
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    (setq which-key-idle-delay 0.1)
    (setq which-key-prefix-prefix nil)
    (which-key-mode 1))
#+end_src

** Additional Package
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :init
    (setq magit-diff-refine-hunk 'all)
    (setq transient-values
          '((magit-log:magit-log-mode "-n256" "--graph" "--color" "--decorate"))))

  (use-package evil-surround
    :bind (:map evil-visual-state-map
                ("s" . evil-surround-region))
    :init (global-evil-surround-mode 1))

  (use-package evil-org
    :init
    (with-eval-after-load 'evil-org
      (add-to-list 'load-path (concat (getenv "HOME") "/.emacs.d/plugins/evil-org-mode"))
      (add-hook 'org-mode-hook 'evil-org-mode)
      (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
      (evil-define-key 'insert 'evil-org-mode (kbd "C-d") 'delete-char)
      (evil-define-key 'insert 'evil-org-mode (kbd "RET") 'org-return-and-maybe-indent)
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)))

  (use-package evil-nerd-commenter)

  (use-package company
    :init (global-company-mode))

  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package ox-reveal)
  (use-package org-pomodoro)

  (use-package winum
    :init
    (setq winum-keymap
          (let ((map (make-sparse-keymap)))
            (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
            (define-key map (kbd "M-1") 'winum-select-window-1)
            (define-key map (kbd "M-2") 'winum-select-window-2)
            (define-key map (kbd "M-3") 'winum-select-window-3)
            (define-key map (kbd "M-4") 'winum-select-window-4)
            (define-key map (kbd "M-5") 'winum-select-window-5)
            (define-key map (kbd "M-6") 'winum-select-window-6)
            (define-key map (kbd "M-7") 'winum-select-window-7)
            (define-key map (kbd "M-8") 'winum-select-window-8)
            map))
    (winum-mode))

  (use-package smartparens
    :init
    (require 'smartparens-config)
    (smartparens-global-mode))

  (use-package valign
    :init (add-hook 'org-mode-hook #'valign-mode))

  (use-package avy
    :init
    (setq avy-background t)
    (setq avy-keys (number-sequence ?a ?z))
    (global-set-key (kbd "M-n") 'avy-goto-word-or-subword-1)
    (setq avy-all-windows nil))

  (use-package org-mac-link)
#+end_src

* load files
#+begin_src emacs-lisp :tangle yes
  (dolist (file (directory-files (concat (getenv "HOME") "/nbm-root/nbm-system") t "[.]el$"))
    (load-file file))
  (setq bookmark-default-file (concat *nbm-home* "nbm-user-settings/references/bookmark.el"))

  (nbm-key-tree-load)

  (cond ((equal system-type 'windows-nt)
         (setq ispell-program-name "hunspell")
         (setq ispell-dictionary "en_US")
         (setq ispell-hunspell-dictionary-alist '(("en_US" "c:/msys64/mingw64/share/hunspell/en_US.aff")))
         (setq ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
        ((equal system-type 'darwin)
         (if (file-exists-p "/opt/homebrew/bin/ispell")
             (setq ispell-program-name "/opt/homebrew/bin/ispell")
           (setq ispell-program-name "/usr/local/bin/ispell")))
        ((equal system-type 'gnu/linux)
         (setq ispell-program-name "/usr/bin/ispell")))

  (unless (file-exists-p (concat *nbm-home* "nbm-user-settings/references/my-dictionary"))
    (copy-file (concat (getenv "HOME") "/nbm-root/newbiemacs/nbm-user-settings/references/my-dictionary")
               (concat *nbm-home* "nbm-user-settings/references/my-dictionary")))

  (setq ispell-personal-dictionary (concat *nbm-home* "nbm-user-settings/references/my-dictionary"))
#+end_src

* customization
** system
#+begin_src emacs-lisp :tangle yes
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'apple)
  (setq x-select-enable-clipboard t)
  (setq delete-by-moving-to-trash t)
  (when (eq system-type 'darwin)
    (global-set-key "\M-R" 'query-replace)
    (setq trash-directory "~/.Trash"))

  (setq help-window-select t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq large-file-warning-threshold nil)

  (save-place-mode)
  (setq find-file-visit-truename t)

  (recentf-mode 1)
  (setq recentf-max-menu-items 55)
  (setq recentf-max-saved-items 55)

  (setq sentence-end-double-space nil)
  (add-to-list 'auto-mode-alist '("\\.sage\\'" . python-mode))
#+end_src
** appearance
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes)
  (unless (nbm-get-user-variable "theme")
    (nbm-set-user-variable "theme" "doom-one"))
  (load-theme (intern (nbm-get-user-variable "theme")) t)

  (use-package anzu
    :init
    (global-anzu-mode +1)
    (setq anzu-cons-mode-line-p t))

  (set-face-attribute 'isearch nil
                      :background "Seagreen1"
                      :foreground "black"
                      :weight 'bold)

  (setq max-mini-window-height 0.8)

  (setq scroll-step 1) ;; keyboard scroll one line at a time

  (set-face-attribute 'default nil :height 150)
  (setq ring-bell-function 'ignore)
  (setq resize-mini-windows t)

  (setq inhibit-startup-screen t)
  (global-visual-line-mode)

#+end_src
** mode-line
#+begin_src emacs-lisp :tangle yes
  (setq-default mode-line-format
                '((:eval (format winum-format (winum-get-number-string)))
                  (:eval (cond
                          ((evil-insert-state-p) (propertize " I " 'face '(:foreground "black" :background "green" :weight bold)
                                                             'help-echo "Insert mode: Editing text"))
                          ((evil-normal-state-p) (propertize " N " 'face '(:foreground "black" :background "orange" :weight bold)
                                                             'help-echo "Normal mode: Navigate and manipulate text"))
                          ((evil-operator-state-p) (propertize " N " 'face '(:foreground "black" :background "orange" :weight bold)
                                                               'help-echo "Visual mode: Select text regions"))
                          ((evil-visual-state-p) (propertize " V " 'face '(:foreground "black" :background "grey" :weight bold)
                                                             'help-echo "Visual mode: Select text regions"))
                          ((evil-replace-state-p) (propertize " R " 'face '(:foreground "black" :background "red" :weight bold)
                                                              'help-echo "Replace mode: Overwrite text"))
                          ((evil-motion-state-p) (propertize " M " 'face '(:foreground "black" :background "purple" :weight bold)
                                                             'help-echo "Motion mode: Read-only navigation"))
                          ((evil-emacs-state-p) (propertize " E " 'face '(:foreground "black" :background "cyan" :weight bold)
                                                            'help-echo "Emacs mode: Vanilla Emacs behavior"))))
                  " "
                  (:propertize ("" mode-line-client mode-line-modified mode-line-remote))
                  (:eval (if defining-kbd-macro
                             (propertize " [DEF]" 'face '(:foreground "red" :weight bold))
                           ""))
                  " "
                  mode-line-buffer-identification
                  " "
                  mode-line-misc-info
                  (:propertize " " display (space :align-to (- right 15)))
                  (:eval (if evil-input-method
                             (propertize (format "[%.2s]" (upcase evil-input-method)) 'face '(:foreground "orange" :weight bold))
                           "    "))
                  (:eval (make-string (- 6 (length (format-mode-line "%l"))) ?\s))
                  " %l "
                  (:eval
                   (let ((pos (format-mode-line "%p")))
                     (when (string= pos "Bottom")
                       (setq pos "Bot"))
                     (replace-regexp-in-string "%" "%%" (format "[%s] " pos)))) 
                  " "))

  (setq-default mode-line-buffer-identification
                '(:eval (let ((name (buffer-name))
                              (limit (- (frame-width) 26)))
                          (when defining-kbd-macro
                            (setq limit (- limit 6)))
                          (if (> (length name) limit)
                              (concat (substring name 0 (- limit 3)) "...")
                            name))))
#+end_src
** tool-bar
#+begin_src emacs-lisp :tangle yes
  (setq LaTeX-enable-toolbar nil)
  (setq tool-bar-map (make-sparse-keymap))
  (define-key tool-bar-map [font-down]
              `(menu-item "Font size down" text-scale-decrease
                          :image (image :type png :file ,(nbm-root-f "icons/font-down.png"))
                          :help "Decrease fontsize (C-x C--)"))
  (define-key tool-bar-map [font-up]
              `(menu-item "Font size up" text-scale-increase
                          :image (image :type png :file ,(nbm-root-f "icons/font-up.png"))
                          :help "Increase fontsize (C-x C-=)"))
  (define-key tool-bar-map [max-window]
              `(menu-item "maximize" delete-other-windows
                          :image (image :type png :file ,(nbm-root-f "icons/max-win.png"))
                          :help "Maximize window (<leader> w m)"))
  (define-key tool-bar-map [kill-current-buffer]
              `(menu-item "kill" kill-current-buffer
                          :image (image :type png :file ,(nbm-root-f "icons/kill-win.png"))
                          :help "Kill this buffer"))
  (define-key tool-bar-map [torus]
              `(menu-item "Torus" torus
                          :image (image :type png :file ,(nbm-root-f "icons/torus.png"))
                          :help "Torus Game!"))
  (define-key tool-bar-map [open-folder]
              `(menu-item "Folder" nbm-show-in-finder
                          :image (image :type png :file ,(nbm-root-f "icons/folder.png"))
                          :help "Open the current folder"))
  (define-key tool-bar-map [find-org]
              `(menu-item "gtd" org-roam-node-find
                          :image (image :type png :file ,(nbm-root-f "icons/org.png"))
                          :help "Find org"))
  (define-key tool-bar-map [find-tex]
              `(menu-item "tex" nbm-find-tex
                          :image (image :type png :file ,(nbm-root-f "icons/tex.png"))
                          :help "Find tex"))
  (define-key tool-bar-map [find-pdf]
              `(menu-item "pdf" nbm-find-pdf
                          :image (image :type png :file ,(nbm-root-f "icons/pdf.png"))
                          :help "Find pdf"))
  (define-key tool-bar-map [newbie]
              `(menu-item "newbie" newbie
                          :image (image :type png :file ,(nbm-root-f "icons/newbie.png"))
                          :help "Newbiemacs main page"))
#+end_src

** tab-line-mode
#+begin_src emacs-lisp :tangle yes
  (global-tab-line-mode)

  (setq tab-line-new-button-show nil)
  (setq tab-line-separator " ")
  (set-face-attribute 'tab-line-tab nil
                      :background "YellowGreen" :foreground "black" :box nil)
  (set-face-attribute 'tab-line-tab-current nil
                      :background "Yellow1" :foreground "black" :box nil)
  (set-face-attribute 'tab-line-tab-inactive nil
                      :background "DarkGray" :foreground "black" :box nil)
  (set-face-attribute 'tab-line-highlight nil
                      :background "Seagreen1" :foreground 'unspecified)

  (setq tab-line-exclude-modes
        '(help-mode completion-list-mode org-agenda-mode helm-major-mode magit-status-mode))
  (setq tab-line-tab-name-function 'tab-line-tab-name-truncated-buffer)
  (setq tab-line-tab-name-truncated-max 15)
#+end_src

** undo-tree
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :init
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1)
    (setq undo-tree-auto-save-history nil))
#+end_src

** language
#+begin_src emacs-lisp :tangle yes
  (setq default-input-method "korean-hangul")
  (global-set-key "\M-i" 'toggle-input-method)
  (define-key isearch-mode-map "\M-i" 'nbm-isearch-toggle-input-method)

  (defun nbm-isearch-toggle-input-method ()
    "Toggle-input-method in isearch."
    (interactive)
    (isearch-edit-string))
#+end_src

* evil mode
#+begin_src emacs-lisp :tangle yes
  (evil-set-leader '(normal visual motion) (kbd "SPC"))
  (evil-set-leader '(normal visual motion) (kbd ",") t)
  (evil-set-leader '(normal visual motion insert emacs) (kbd "M-o"))
  (evil-set-leader '(normal visual motion insert emacs) (kbd "M-RET") t)

  (define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<down>") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<up>") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
  
  (define-key evil-insert-state-map (kbd "C-y") 'yank)
  (define-key evil-insert-state-map (kbd "M-y") 'helm-show-kill-ring)
#+end_src

* latex
#+begin_src emacs-lisp :tangle yes
  (server-start)                        ; This is needed for Skim to inverse search
  (setq TeX-source-correlate-mode 1)
  (defvar *nbm-latex-bib-file* (concat *nbm-home* "nbm-user-settings/references/ref.bib"))
  (setq reftex-default-bibliography *nbm-latex-bib-file*)

  (setq TeX-save-query nil)
  (setq TeX-auto-save t)
  (setq TeX-electric-math (cons "\\( " " \\)"))
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook (lambda () (setq TeX-command-default "LatexMk")))

  ;; On Mac, Skim will be used as a pdf-viewer.
  (when (equal system-type 'darwin)
    (setq TeX-view-program-list
          '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o"))
          TeX-view-program-selection '((output-pdf "Skim"))))

  ;; On Windows, SumatraPDF will be used as a pdf-viewer.
  (when (equal system-type 'windows-nt)
    (load-file (concat (getenv "HOME") "/nbm-root/nbm-windows-config.el")))

  (evil-define-key '(normal visual) LaTeX-mode-map (kbd "%") 'nbm-latex-evil-jump-item)

  (evil-define-key 'emacs reftex-toc-mode-map (kbd "q") 'nbm-reftex-toc-quit)
  (evil-define-key 'emacs reftex-toc-mode-map (kbd "RET") 'nbm-reftex-toc-goto-line-and-hide)
  (evil-define-key 'emacs reftex-toc-mode-map (kbd "j") 'reftex-toc-next)
  (evil-define-key 'emacs reftex-toc-mode-map (kbd "k") 'reftex-toc-previous)

  (evil-define-key 'emacs reftex-select-label-mode-map (kbd "k") 'reftex-select-previous)
  (evil-define-key 'emacs reftex-select-label-mode-map (kbd "j") 'reftex-select-next)

  (global-set-key "\C-\M-e" 'nbm-end-of-defun)
  (define-key evil-normal-state-map (kbd "]]") 'nbm-end-of-defun)
  (define-key evil-visual-state-map (kbd "]]") 'nbm-end-of-defun)

  ;; Modify the behavior of TeX-insert-dollar.
  (defun TeX-insert-dollar ()
    "A customized version of TeX-insert-dollar."
    (interactive)
    (nbm-TeX-insert-dollar))

  (eval-after-load "tex"
    '(add-to-list 'TeX-command-list
                  '("XeLaTeX" "xelatex -shell-escape -interaction nonstopmode %s"
                    TeX-run-command nil t :help "Run XeLaTeX")))
#+end_src

** auctex-latexmk
#+begin_src emacs-lisp :tangle yes
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  ;; To make latexmk use pdflatex we need ~/.latexmkrc file.
  (unless (file-exists-p (concat (getenv "HOME") "/.latexmkrc"))
    (find-file (concat (getenv "HOME") "/.latexmkrc"))
    (insert "$pdf_mode = 1;")
    (save-buffer) (kill-buffer))
  (require 'reftex-ref)

  (setq LaTeX-clean-intermediate-suffixes (remove "\\.synctex\\.gz" LaTeX-clean-intermediate-suffixes))

  ;; The following is helpful for recognizing ^ and _ in latex code.
  (with-eval-after-load 'font-latex
    (let ((math-fg (face-attribute 'font-latex-math-face :foreground nil 'default)))
      (custom-set-faces
       `(font-latex-script-char-face ((t (:foreground ,math-fg)))))))
#+end_src

** bibtex
#+begin_src emacs-lisp :tangle yes
  (defun bibtex-completion-format-citation-cite (keys)
    "Modified bibtex-completion-format-citation-cite to make cite-command to be \"cite\"."
    (let (macro)
      (cond
       ((and (require 'reftex-parse nil t)
             (setq macro (reftex-what-macro 1))
             (stringp (car macro))
             (string-match "\\`\\\\cite\\|cite\\'" (car macro)))
        (delete-horizontal-space)
        (concat (pcase (preceding-char) (?\{ "") (?, " ") (_ ", ")) (s-join ", " keys)
                (if (member (following-char) '(?\} ?,)) "" ", ")))
       ((and (equal (preceding-char) ?\})
             (require 'reftex-parse nil t)
             (save-excursion
               (forward-char -1)
               (setq macro (reftex-what-macro 1)))
             (stringp (car macro))
             (string-match "\\`\\\\cite\\|cite\\'" (car macro)))
        (delete-char -1)
        (delete-horizontal-space t)
        (concat (pcase (preceding-char) (?\{ "") (?, " ") (_ ", ")) (s-join ", " keys) "}"))
       (t
        (let* ((cite-command "cite"))
          (format "\\%s{%s}" cite-command (s-join ", " keys)))))))
#+end_src


* org-mode
#+begin_src emacs-lisp :tangle yes
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)

  (setq org-return-follows-link t)
  (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point)

  (setq org-directory (concat *nbm-home* "org/"))
  (setq org-default-notes-file (concat org-directory "/capture.org"))
  (setq org-agenda-span 1)
  (setq org-log-into-drawer t)
  (setq org-startup-with-inline-images nil)
  (setq org-duration-format (quote h:mm))
  (setq org-startup-indented t)
  (setq org-ref-default-bibliography(concat *nbm-home* "nbm-user-settings/references/ref.bib")
        bibtex-completion-bibliography (concat *nbm-home* "nbm-user-settings/references/ref.bib"))

  (eval-after-load "org" '(require 'ox-md nil t))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (define-key org-mode-map (kbd "$") 'nbm-org-TeX-insert-dollar)
  (define-key org-mode-map (kbd "<drag-n-drop>") 'nbm-org-drag-n-drop)

  (setq org-imenu-depth 9)
  (nbm-org-load-agenda-files)
  (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
#+end_src

** Org-Roam
#+begin_src emacs-lisp :tangle yes
  (when (package-installed-p 'org-roam)
    (setq org-roam-db-location (concat (getenv "HOME") "/.emacs.d/org-roam.db"))
    (setq org-roam-directory (concat *nbm-home* "org/"))
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:15}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                        :target (file+head "${slug}.org"
                                                           "#+title: ${title}\n ")))))
#+end_src

* Dired
#+begin_src emacs-lisp :tangle yes
  (setq dired-dwim-target t)
  (evil-define-key 'normal dired-mode-map (kbd "M-<backspace>") 'newbie)
  (evil-define-key 'normal dired-mode-map (kbd "SPC") 'evil-send-leader)
  (evil-define-key 'normal dired-mode-map (kbd ",") 'evil-send-localleader)
  (evil-define-key 'emacs dired-mode-map (kbd "M-<backspace>") 'newbie)
  (evil-define-key 'emacs dired-mode-map (kbd "SPC") 'evil-send-leader)
  (evil-define-key 'emacs dired-mode-map (kbd ",") 'evil-send-localleader)
  (evil-define-key 'emacs dired-mode-map (kbd "q") 'kill-current-buffer)
#+end_src

* Editing styles (Emacs, Vim, Windows)
#+begin_src emacs-lisp :tangle yes
  (setq evil-default-state 'emacs)
  (evil-set-initial-state 'org-agenda-mode 'emacs)
  (evil-set-initial-state 'diff-mode 'emacs)
  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'Info-mode 'emacs)
  (evil-set-initial-state 'org-mode 'emacs)

  (unless (nbm-get-user-variable "editing-style")
    (nbm-set-user-variable "editing-style" "windows"))

  (when (equal (nbm-get-user-variable "editing-style") "emacs")
    (evil-global-set-key 'emacs (kbd "C-r") 'evil-redo))

  (unless (equal (nbm-get-user-variable "editing-style") "emacs")
    (define-key minibuffer-local-map (kbd "C-v") 'yank)
    (define-key minibuffer-local-map (kbd "M-v") 'yank)
    (define-key helm-map (kbd "C-v") 'yank)
    (define-key helm-map (kbd "M-v") 'yank))

  (when (equal (nbm-get-user-variable "editing-style") "vim")
    (evil-set-initial-state 'text-mode 'normal)
    (evil-set-initial-state 'org-mode 'normal)
    (evil-set-initial-state 'latex-mode 'normal)
    (evil-set-initial-state 'bibtex-mode 'normal)
    (evil-set-initial-state 'emacs-lisp-mode 'normal)
    (evil-set-initial-state 'fundamental-mode 'normal)
    (evil-set-initial-state 'snippet-mode 'normal)
    (evil-set-initial-state 'python-mode 'normal))

  (when (equal (nbm-get-user-variable "editing-style") "windows")
    (cua-mode t)
    (eval-after-load 'org
      (progn
        (define-key org-mode-map (kbd "<S-up>") nil)
        (define-key org-mode-map (kbd "<S-down>") nil)
        (define-key org-mode-map (kbd "<S-right>") nil)
        (define-key org-mode-map (kbd "<S-left>") nil)))
    (evil-global-set-key 'emacs (kbd "C-a") 'mark-whole-buffer)
    (evil-global-set-key 'emacs (kbd "C-f") 'isearch-forward)
    (evil-global-set-key 'emacs (kbd "C-S-f") 'query-replace)
    (evil-global-set-key 'emacs (kbd "C-s") 'save-buffer)
    (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
    (define-key key-translation-map (kbd "C-z") (kbd "C-/"))
    (evil-global-set-key 'emacs (kbd "C-y") 'evil-redo)
    (setq org-support-shift-select t))
#+end_src

* Welcome page
#+begin_src emacs-lisp :tangle yes
  (when (window-system)  ; if emacs is run as an application other than terminal
    (if *nbm-startup-frame*
        (nbm-set-startup-frame)
      (nbm-magnet-move-frame ?l)))
  (newbie)
  (if (get-buffer "*scratch*") (kill-buffer "*scratch*"))
#+end_src
